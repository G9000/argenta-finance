name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, arg-8-batch]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  FOUNDRY_PROFILE: ci
  NODE_ENV: test

jobs:
  # Contract Tests
  contracts-test:
    name: 🔗 Contract Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ⚙️ Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: 📦 Install dependencies
        run: forge install

      - name: 🔨 Build contracts
        run: forge build --sizes

      - name: 🧪 Run contract tests
        run: forge test -vvv

      - name: 📊 Generate coverage report
        run: forge coverage --report lcov

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./contracts/lcov.info
          flags: contracts

  # Frontend Tests
  web-test:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./web/package-lock.json"

      - name: ⚙️ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type check
        run: pnpm run build --dry-run || npx tsc --noEmit

      - name: 🎨 Lint check
        run: pnpm run lint

      - name: 🧪 Run unit tests
        run: pnpm test --run --coverage

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./web/coverage/lcov.info
          flags: frontend

      - name: 🔨 Build application
        run: pnpm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: ./web/.next
          retention-days: 1

  # Security & Quality Checks
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🔍 Web dependencies audit
        working-directory: ./web
        run: |
          npm audit --audit-level=high

  # Integration Test (Optional - can be expanded)
  integration-test:
    name: 🔄 Integration Tests
    needs: [contracts-test, web-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: ./web/.next

      - name: ✅ Integration test placeholder
        run: |
          echo "✅ All unit tests passed"
          echo "🚀 Ready for deployment"

  # Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy
    needs: [contracts-test, web-test, security-audit, integration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: ./web/.next

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          echo "📦 Artifacts ready for deployment"
          # Add your deployment commands here
          # For example: deploy to Vercel, AWS, etc.

  # Notification
  notify:
    name: 📢 Notify
    needs: [contracts-test, web-test, security-audit]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📢 Send notification
        run: |
          if [ "${{ needs.contracts-test.result }}" = "success" ] && \
             [ "${{ needs.web-test.result }}" = "success" ] && \
             [ "${{ needs.security-audit.result }}" = "success" ]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed. Check the logs above."
            exit 1
          fi
